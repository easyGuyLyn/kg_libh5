apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion



    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

    }




    buildTypes {
        debug {
            minifyEnabled true
            // 混淆文件位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        release {
            minifyEnabled true
            // 混淆文件位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }



    //为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportVersion}"

//    implementation 'com.google.code.gson:gson:2.8.2'
//    implementation 'com.zhy:okhttputils:2.6.2'
//    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
}



def SDK_BASENAME = "kgjar"
def SDK_VERSION = "_v1.0.0"
def sdkDestinationPath = "build/outputs/jar/"
def zipFile = file('build/intermediates/packaged-classes/release/classes.jar')

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
    from fileTree(dir: 'src/main', includes: ['assets/**']) // 打包assets目录下的所有文件
    baseName = SDK_BASENAME + SDK_VERSION
    destinationDir = file(sdkDestinationPath)
}

makeJar.dependsOn(deleteBuild, build)


//task makeJar(type: proguard.gradle.ProGuardTask, dependsOn: "build") {
//    //删除之前编译混淆jar包
//   // delete'build/outputs/jar/kg.jar'
//    // 未混淆的jar
//    injars 'build/intermediates/packaged-classes/release/classes.jar'
//    // 混淆后的jar路径
//    outjars 'build/outputs/jar/kg.jar'
//    // 混淆文件
//    configuration 'proguard-rules.pro'
//}